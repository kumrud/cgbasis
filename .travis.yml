env:
  matrix:
  - MYCONDAPY=3.6
  - MYCONDAPY=3.7
  global:
    # ANACONDA_TOKEN
    - secure: "ZEez6ZLVYwitgGRiq1Z4QZLve/gH7Lgj7SoLqB93gfmJ8pK9wD4lf0l6hYnviEKFAP5TCmc2Y5HoPT4C9YtP4oFE9xdTD9kTYLkDb9/6PsP/bCDwOeLmqoBqjmqvhpMPMF/idLOH81lyuecedoxaQjK8Gf8Ybesz3p1X1FlDrJgrcTtvPpz9uhHQXwb7otZbsc6He+YWdKrZy8PiBidmP3rK3SZvSPBmk5nrgfWsP1fnE27RfbVwABZ6txE8ns9ceHXdjIoxScnF5OlxLMOaobNgRuk4IB5yZMQNgEFPfzklKZAlmeTLVKHMbywTN7+KO64Tqu02pg6SJm3bSTFircticELbz9bgu5W8Dw7TghU9X+IPYrCsL7Fk67Rwk4dMFfZRaJ7BsnSLJCWYlDcu8GQWZvZI7jM8zDde3Z78zYY5Jhk981OI4AtLgW1STrdikXJWMEV+e4YaDI5vlT+FGt7FNcc9MxgNiHq/TpejTStiVFHKzDiGKu5hvzzpxZXdqKlonjac2Ajkju7CXmcQk3QjLhGBdu1WdzaOEV/D3QjkrwRv5RP8twenYtTWxHpu77UsBAJc9LACoYPodyd4wccIYlkl/hcBhAMw44k39DCcAz7FyYjjsG3hNi1QK2fR8u8VXbElEp8CSb1kV5YsbM1vemgCDMEgwxy3EKlyolk="
    # GITHUB_TOKEN
    - secure: "HDXMR3pl1zGUrsUqlK78ao6Wk/ANaODmY1t8xySZJbYFYjPPNFr9/v+PMYxsBbyx5w1SZlBCyazW89JVA903HClYGMDCgHkUaAxAGls0xbvWJzN6Da5RuzYOzW2q140EHwzFT/M0Yft0cUThtc+xcJWpxRpGOfZXYT6TBvsC8ufEgM42YMyFWZ/37DSu2T+atVWF22n/NesAG4BVpKMMUKMVftIR6dTG5LTYZq2zhOzDZwGSEuqEHEbC2lnjEmJIgUoCs8UUSe9fFY5E7T1BJRaioPhAL+k4J5pxRc33o6QDKnTqZI8BDv7j18Lefi6NcHcUNBBWZz6/J9kj18z8rQq+Sk8tWVFYW62MQriW1WQ5BrFBiuIgmKvbUOxAlYiSo0+7DnyDg0LlBeCfWUYrztQ0K/NxpF8IZ1yMf2y3SynA530QPsJpDQceeV1LNn7vt5j8voNKN0M73E5v0VF/oOMOdQIF6BMIwq54m0Ho0OofqC8rOOD5gfJLJd8SPOqLVDIHtp+FC7AzmreXg7Y8gSVdKvMXc1FJcoeGFFdK4RZIQQn8VWYmcwnG57qdDmfbb4PJ7atyT4wTiLqcJowe9N8bDsKayXsDzr5A8PT2z1JpcFvEMzUf95UqsvgEnAI7i2J9egt/Oo7B46DGW75Y/Ep13igjkULOZOVep7r5Mn0="
    # PYPI_PASSWD
    - secure: "qF+Rt1J6xmcELElMbp7LXURZl56c9mvSr/O+HQJ13GlUQlO/T3joAuVzNQKU0vIthVDwHOSsWZYikeVGyr2rQTM2UTfpysiUqmk8oiGj8SZklka7E8JqCeBh4voA7ZkcvIM3kYjH4k34WPEX/ByC1jCu4KJGwXXZz5mHQBM/KFpi98WFhbT3oPvWeh+6RfuFnmcd7RrjtQ5tvs/z5H/ektsj11Zw24cdJKyfe9nD70m8SO2IgM50X5TQitICqnASjAkaMkBZ9hr7myozQwB1Q+f6fh4VO9kipDyt3ypNrd//lWR/mYocfOTimMKH+XiaIFxn4emFLzRICruQWQNm9hOmiopZY3Cc/VojbBAGtkkCr2wd42wM61Z52uZEMr1W8dc6ixKwKvtFWx4o0ZiTZTBFo/+oxRmOLzoYNIVYnpeSsOaBAx6lFvgm/7H0Zuzm4WF91ZGNT+fxu5TlACM4CCFvN0jHW/cwCZYoZvWTfvRQdM1C1dW4XYwQx8x1gK1qbrkf4BysikYxf56b+8LtO9RC9S6NSVxQg0aFq/fgadkViy5VuHq3iel6r889xlGgg8v6uBivGdUg3o5Qgg8C+LNDm+0dpdPDpwlLBvyWHpgwyUqry/Ms0Tp1XkItkVWnJ7qfgKBjsXNRCWiZMNTFoI9YC0KkAJMgSTdmtlCm210="
    - GITHUB_REPO_NAME=theochem/gbasis
    - PROJECT_NAME=gbasis
    - CONDA_PKG_NAME_PY=gbasis
    - CPATH=${HOME}/miniconda/include/libint2

# TEMPLATED FROM https://raw.githubusercontent.com/theochem/python-cython-ci-example/master/.travis.yml
####
# EVERYTHING BELOW THIS LINE IS AUTOGENERATED.
####
# v1.0

# Do not use Travis Python to save some time.
language: generic
os:
  - linux
  - osx
osx_image: xcode8.3
dist: trusty
sudo: false

matrix:
  # We only test on Linux with one specific Python version, unless we make a release. All
  # other cases are allowed to fail and will exit early. With the fast_finish option,
  # travis will send a status update to github as soon as the non-allowed-to-fail has
  # finished. This speeds up testing in PRs.
  #
  # This is not ideal. It would be better to run just one item from the build matrix when
  # not preparing a release. This is not possible on Travis. There are several tickets on
  # travis-ci related to this limitation.
  #
  #    https://github.com/travis-ci/travis-ci/issues/7451
  #    https://github.com/travis-ci/travis-ci/issues/7149
  #    https://github.com/travis-ci/travis-ci/issues/2778
  #    ...
  fast_finish: true
  allow_failures:
  - os: osx


cache:
  directories:
    - $HOME/download # Sufficient to add miniconda.sh to TRAVIS cache.
    - $HOME/miniconda # Add the installation to TRAVIS cache.

before_cache:
- if ! [[ $TRAVIS_TAG ]]; then rm -rf $HOME/miniconda/conda-bld; fi
- rm -rf $HOME/miniconda/locks $HOME/miniconda/pkgs $HOME/miniconda/var $HOME/miniconda/conda-meta/history
- pip uninstall -y cardboardlint # Cardboardlint always installs even if no changes are made.

branches:
  only:
    - master
    - /^[0-9]+\.[0-9]+(\.[0-9]+)?([ab][0-9]+)?$/

before_install:
- if ! [[ $TRAVIS_TAG || $TRAVIS_OS_NAME == "linux" && $MYCONDAPY == "3.6" ]]; then exit 0; fi
# Get miniconda. Take the right version, so re-installing python is hopefully not needed.
- if test -e $HOME/miniconda/bin; then
    echo "miniconda already installed.";
  else
    echo "Installing miniconda.";
    rm -rf $HOME/miniconda;
    mkdir -p $HOME/download;
    if [[ -d $HOME/download/miniconda.sh ]]; then rm -rf $HOME/download/miniconda.sh; fi;
    if [ "${MYCONDAPY}" = "2.7" ]; then
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda2-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
    else
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O $HOME/download/miniconda.sh;
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O $HOME/download/miniconda.sh;
      fi;
    fi;
    bash $HOME/download/miniconda.sh -b -p $HOME/miniconda;
  fi


install:
- source $HOME/miniconda/bin/activate
- hash -r
# Configure conda and get a few essentials
- conda config --set always_yes yes
- conda config --add channels theochem
- conda install -q conda conda-build conda-verify

# Set the version info from the git tag
- git fetch origin --tags &&
  export PROJECT_VERSION=$(python tools/gitversion.py) &&
  python tools/gitversion.py python > ${PROJECT_NAME}/version.py;

# Get a list of all build and runtime dependencies.
# This should become easier, without the copy to conda.recipe.ugly.
- conda render -f tools/conda.recipe/rendered.yaml tools/conda.recipe
- CONDA_DEPENDENCIES=$(python -c "from yaml import load;
    req1 = load(open('tools/conda.recipe/rendered.yaml'))['requirements'];
    deps = req1['build'] + req1['run'] + req1['host'];
    print(' '.join(set(dep.split()[0] for dep in deps)))")

# Get the right python version for building. This only does something for 3.5.
# Install extra package needed to make things work. Most things can be listed as
# dependencies on metal.yaml and setup.py, unless setup.py already imports them.
# Install conda tools for packaging and uploading
- conda install -q python=${MYCONDAPY} anaconda-client ${CONDA_DEPENDENCIES}
# Install more recent stuff with pip
- pip install --upgrade pylint codecov coverage pycodestyle pydocstyle
# Show conda info for debugging
- conda info -a

# Install the latest cardboardlinter
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    pip install --upgrade git+https://github.com/theochem/cardboardlint.git@master#egg=cardboardlint;
  fi

script:
# Static linting
# --------------
- if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
    cardboardlinter --refspec $TRAVIS_BRANCH -f static;
  fi

# Unit tests and dynamic linting
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- if [[ $TRAVIS_TAG ]]; then
    conda build -q tools/conda.recipe; 
  else
    python setup.py build_ext -i --define CYTHON_TRACE_NOGIL &&
    nosetests ${PROJECT_NAME}
         -v --detailed-errors --with-coverage --cover-package=${PROJECT_NAME}
         --cover-tests --cover-inclusive --cover-branches &&
    coverage xml -i &&

    if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then
       cardboardlinter --refspec $TRAVIS_BRANCH -f 'dynamic';
    fi
  fi

# Make CPP and PY source package for github deployment
- if [[ $TRAVIS_TAG ]]; then
    python setup.py sdist;
  fi

# Some other stuff
# ----------------

# Compile documentation
- if [[ -e doc ]]; then
    (cd doc; make html);
  fi

after_success:
# Upload the coverage analysis
- codecov -f coverage.xml

before_deploy:
# Try to set some env vars to configure deployment.
# Please keep the following lines. They will be used again as soon as it is supported on
# travis. See https://github.com/travis-ci/dpl/issues/613
#- export IS_PRERELEASE=$(python -c 'import os; tt=os.environ["TRAVIS_TAG"]; print("true" if ("a" in tt or "b" in tt) else "false")')
#- echo ${IS_PRERELEASE}
- export ANACONDA_LABEL=$(python -c 'import os; tt=os.environ["TRAVIS_TAG"]; print("dev" if ("a" in tt) else ("test" if "b" in tt else "main"))')
- echo ${ANACONDA_LABEL}

# In deployment, the env var TRAVIS_TAG contains the name of the current version, if any.
deploy:
- provider: releases
  skip_cleanup: true
  api_key: ${GITHUB_TOKEN}
  file: dist/${PROJECT_NAME}-${TRAVIS_TAG}.tar.gz
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux && $TRAVIS_TAG == *[ab]*"
  prerelease: true

- provider: releases
  skip_cleanup: true
  api_key: ${GITHUB_TOKEN}
  file: dist/${PROJECT_NAME}-${TRAVIS_TAG}.tar.gz
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux && $TRAVIS_TAG != *[ab]*"
  prerelease: false

- provider: script
  skip_cleanup: true
  script: anaconda -t $ANACONDA_TOKEN upload --force -l ${ANACONDA_LABEL} ${HOME}/miniconda/conda-bld/*/${PROJECT_NAME}-*.tar.bz2
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true

- provider: pypi
  skip_cleanup: true
  user: ${PYPI_LOGIN}
  password: ${PYPI_PASSWD}
  on:
    repo: ${GITHUB_REPO_NAME}
    tags: true
    condition: "$TRAVIS_TAG != *[ab]* && $MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux"

- provider: pages
  skip_cleanup: true
  github_token: ${GITHUB_TOKEN}
  project_name: ${PROJECT_NAME}
  local_dir: doc/_build/html
  on:
    repo: ${GITHUB_REPO_NAME}
    condition: "-e doc && $TRAVIS_TAG != *[ab]* && $MYCONDAPY == 2.7 && $TRAVIS_OS_NAME == linux"
    tags: true
